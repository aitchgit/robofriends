{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","_ref","name","email","id","phone","website","react_default","a","createElement","class","src","concat","alt","CardList","robots","console","log","className","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","placeholder","onChange","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","children","Component","Header","nextProps","nextState","App","count","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","ErrorBoundry","components_CardList","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.285a0bb8.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\nconst Card = ({ name, email, id, phone, website }) => {\n  return (\n      <div class=\"fl w-100 w-third-ns pa2\">\n      <div class=\"cf ph2-ns card-bg br4\">\n          <div class='fl w-30 pa2 '>\n            <img src={`https://robohash.org/${id}?size=200x200`} class=\"br4 circle-bg\" alt=\"robot profile pic\" />\n          </div>\n          <div class='fl w-70 pa2'>\n            <h1 class=\"f6 f5-ns fw6 lh-title mv0 card-heading-name\">{name} </h1>\n            <h2 class=\"f6 fw4 mt0 mb0 white-60\">{email}</h2>\n            <h2 class=\"f6 fw4 mt0 mb0 white-60\">{phone}</h2>\n            <h2 class=\"f6 fw4 mt0 mb0 white-60\">{website}</h2>\n          </div>\n          </div>\n        </div>      \n             \n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div className='mw9 center ph3-ns cf ph2-ns'>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              phone={robots[i].phone}\n              website={robots[i].website}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='mw9 center ph3-ns'>\n      <input\n        className='pa3 bg-color bn-border'\n        type='search'\n        placeholder='Search robots..'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    console.log('ErrorBoundary');\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react';\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    console.log('header')\n    return (\n      <div className='mw9 center ph3-ns'>\n        <h1 className='f1 white'>RoboFriends</h1>\n      </div>\n    );\n  }\n};\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch)\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      count: 1\n    }\n  }\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div>\n        <Header count={this.state.count}/>\n        <SearchBox searchChange={onSearchChange}/>        \n          { isPending ? <h1 className='tc'>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }       \n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}